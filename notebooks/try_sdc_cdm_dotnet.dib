#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp","languageName":"C#","aliases":["c#","cs"]},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"html","languageName":"HTML"},{"name":"http","languageName":"HTTP"},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"kql","languageName":"KQL"},{"name":"mermaid","languageName":"Mermaid"},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"sql","languageName":"SQL"},{"name":"value"}]}}

#!csharp

// Reference external packages needed for this notebook

#r "nuget:Microsoft.Data.Sqlite,9.0.0"
#r "nuget:Wasmtime,22.0.0"
#r "nuget:Hl7.Fhir.R4,6.0.0-alpha1"
#r "nuget:CsvHelper,33.0.1"

#!pwsh

# Build the SDC CDM libraries

dotnet build ../SdcCdmLib

#!csharp

// Reference the SDC CDM libraries

#r "../SdcCdmLib/SdcCdm/bin/Debug/net8.0/SdcCdm.dll"
#r "../SdcCdmLib/SdcCdmInSqlite/bin/Debug/net8.0/SdcCdmInSqlite.dll"

using SdcCdm;
using SdcCdmInSqlite;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;

// Create CDM database instance

SdcCdmInSqlite.SdcCdmInSqlite sdcCdmInstance = new("public/sdc_cdm.db", overwrite: true);
sdcCdmInstance.BuildSchema();

#!csharp

// Import SDC templates

using System.Xml.Linq;
using System.IO;

// Only import the first two templates to avoid long operation
var xmlFiles = Directory.GetFiles("../sample_data/sdc_templates", "*.xml").Take(2);
foreach (var filePath in xmlFiles)
{
    var doc = XDocument.Load(filePath);
    SdcCdm.TemplateImporter.ImportTemplate(sdcCdmInstance, doc.Root);
}

#!csharp

// Import SDC Template Row Data
SdcCdm.TemplateRowDataImporter.ImportTemplateRowData((ISdcCdm) sdcCdmInstance, Path.Combine("..", "sample_data", "TemplateHistory(in).csv"));

#!csharp

// Import sample SDC XML files

using System.IO;

string directoryPath = Path.Combine("..", "sample_data", "sdc_xml");
string[] sdc_xml_files = Directory.GetFiles(directoryPath, "*.xml");

foreach (string xml_file in sdc_xml_files)
{
    string xml_str = File.ReadAllText(xml_file);
    XDocument doc = XDocument.Parse(xml_str);
    XElement root = doc.Root;
    SdcCdm.XmlFormImporter.ProcessXmlForm((ISdcCdm) sdcCdmInstance, root);
}

#!csharp

// Import NAACCR V2 messages

using System.IO;
string directoryPath = Path.Combine("..", "sample_data", "naaccr_v2");
string[] v2_messages = Directory.GetFiles(directoryPath, "*.hl7");

foreach (var message in v2_messages)
{
    try
    {
        string message_str = File.ReadAllText(message);
        SdcCdm.NAACCRVolVImporter.ImportNaaccrVolV(
            (ISdcCdm) sdcCdmInstance,
            message_str
        );
    }
    catch (Exception e)
    {
        Console.WriteLine($"Error processing message: {message}: {e.Message}");
        continue;
    }
}

#!csharp

// Convert form instance to FHIR CPDS Bundle

string existingTemplate = "5b64392d-680e-4a96-94ca-3da4acf6bd27"; // ADRENAL_GLAND.xml instance ID

Bundle? bundle = FhirCPDSExporter.ExportFhirCpds(sdcCdmInstance, existingTemplate);

if (bundle != null)
{
    var serializer = new FhirJsonSerializer(new SerializerSettings { Pretty = true });
    string bundleJson = serializer.SerializeToString(bundle);
    Console.WriteLine(bundleJson);
}
else
{
    Console.WriteLine("Failed to export FHIR CPDS bundle.");
}
