#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!csharp

// Reference external packages needed for this notebook

#r "nuget:Microsoft.Data.Sqlite,9.0.0"
#r "nuget:Wasmtime,22.0.0"

#!csharp

// Reference the SDC CDM libraries

#r "../sdc-tools/SdcCdm/bin/Debug/net8.0/SdcCdm.dll"
#r "../sdc-tools/SdcCdmInSqlite/bin/Debug/net8.0/SdcCdmInSqlite.dll"

using SdcCdm;
using SdcCdmInSqlite;

#!csharp

SdcCdmInSqlite.SdcCdmInSqlite sdcCdmInstance = new("public/try_sdc_cdm_dotnet.db");

#!csharp

// Import CDM schema definitions

sdcCdmInstance.BuildSchema();

#!csharp

// Import SDC templates
using System.Xml.Linq;
using System.IO;

var xmlFiles = Directory.GetFiles("../sample_data/sdc_templates", "*.xml");
foreach (var filePath in xmlFiles)
{
    var doc = XDocument.Load(filePath);
    XNamespace sdc = "urn:ihe:qrph:sdc:2016";

    // Locate FormDesign node
    var formDesign = doc.Root.Element(sdc + "FormDesign") ?? doc.Root;
    if (formDesign == null)
    {
        Console.WriteLine($"No Form Design found in {Path.GetFileName(filePath)}");
        continue;
    }

    Console.WriteLine($"Form Design: {formDesign}");

    // Extract attributes
    var sdcformdesignid = (string)formDesign.Attribute("ID");
    var baseuri = (string)formDesign.Attribute("baseURI");
    var lineage = (string)formDesign.Attribute("lineage");
    var version = (string)formDesign.Attribute("version");
    var fulluri = (string)formDesign.Attribute("fullURI");
    var formtitle = (string)formDesign.Attribute("formTitle");
    var sdc_xml = formDesign.ToString();
    var doctype = "FD";
    
    // Insert data into database
    sdcCdm.WriteTemplateSdcClass(sdcformdesignid, baseuri, lineage, version, fulluri, formtitle, sdc_xml, doctype);
}

#!csharp

// Import sample SDC XML files

using System.IO;

//var connection = new SqliteConnection("Data Source=public/sdc_cdm_dotnet.db;");
//connection.Open();

string directoryPath = Path.Combine("..", "sample_data", "sdc_xml");
string[] sdc_xml_files = Directory.GetFiles(directoryPath, "*.xml");

// Iterate over each XML file
foreach (string xml_file in sdc_xml_files)
{
    // Read the XML content
    string xml_str = File.ReadAllText(xml_file);

    // Parse the XML
    XDocument doc = XDocument.Parse(xml_str);
    XElement root = doc.Root;

    // Call the process_xml equivalent
    SdcCdm.XmlFormImporter.ProcessXmlForm((ISdcCdm) sdcCdmInstance, root);
}

#!csharp

// Import NAACCR V2 messages

using System.IO;
string directoryPath = Path.Combine("..", "sample_data", "naaccr_v2");
string[] v2_messages = Directory.GetFiles(directoryPath, "*.hl7");

// Iterate over each V2 file
foreach (var message in v2_messages)
{
    try
    {
        // Read the V2 content
        string message_str = File.ReadAllText(message);

        // Call the import function
        SdcCdm.NAACCRVolVImporter.ImportNaaccrVolV(
            (ISdcCdm) sdcCdmInstance,
            message_str
        );
    }
    catch (Exception e)
    {
        Console.WriteLine($"Error processing message: {message}: {e.Message}");
        continue;
    }
}

#!csharp

// Print data for debugging

using Microsoft.Data.Sqlite;

var connection = new SqliteConnection("Data Source=public/sdc_cdm_dotnet_3.db;");
connection.Open();
var results = new List<Dictionary<string, object>>();

using (var cmd = connection.CreateCommand())
        {
            cmd.CommandText = @"
                SELECT * FROM sdcobsclass;
            ";


    using (var reader = cmd.ExecuteReader())
    {
        var row = new Dictionary<string, object>();

        for (int i = 0; i < reader.FieldCount; i++)
        {
            string columnName = reader.GetName(i);
            object value = reader.IsDBNull(i) ? null : reader.GetValue(i);
            row[columnName] = value;
        }

        results.Add(row);
    }
    }
results
