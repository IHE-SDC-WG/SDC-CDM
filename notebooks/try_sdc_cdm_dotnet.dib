#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!csharp

// Reference all the packages needed for this notebook

#r "nuget:Microsoft.Data.Sqlite,9.0.0"
#r "nuget:Wasmtime,22.0.0"

#!csharp

// Create or open a connection to the database

using Microsoft.Data.Sqlite;

var connection = new SqliteConnection("Data Source=public/sdc_cdm_dotnet.db;");
connection.Open();

#!csharp

// Import CDM schema definitions

using System.IO;

var sqlFiles = Directory.GetFiles("../database/ddl/sqlite", "*.sql").OrderBy(f => f);
foreach (var file in sqlFiles)
{
    Console.WriteLine($"Executing {Path.GetFileName(file)}...");
    var sqlScript = File.ReadAllText(file);
    using (var command = connection.CreateCommand())
    {
        command.CommandText = sqlScript;
        command.ExecuteNonQuery();
    }
    Console.WriteLine($"Finished executing {Path.GetFileName(file)}.");
}

#!csharp

// Import SDC templates

using System.Xml.Linq;
using System.IO;

var xmlFiles = Directory.GetFiles("../sample_data/sdc_templates", "*.xml");
foreach (var filePath in xmlFiles)
{
    var doc = XDocument.Load(filePath);
    XNamespace sdc = "urn:ihe:qrph:sdc:2016";

    // Locate FormDesign node
    var formDesign = doc.Root.Element(sdc + "FormDesign") ?? doc.Root;
    if (formDesign == null)
    {
        Console.WriteLine($"No Form Design found in {Path.GetFileName(filePath)}");
        continue;
    }

    Console.WriteLine($"Form Design: {formDesign}");

    // Extract attributes
    var sdcformdesignid = (string)formDesign.Attribute("ID");
    var baseuri = (string)formDesign.Attribute("baseURI");
    var lineage = (string)formDesign.Attribute("lineage");
    var version = (string)formDesign.Attribute("version");
    var fulluri = (string)formDesign.Attribute("fullURI");
    var formtitle = (string)formDesign.Attribute("formTitle");
    var sdc_xml = formDesign.ToString();
    var doctype = "FD";

    using (var command = connection.CreateCommand())
    {
        command.CommandText = @"
            INSERT INTO main.templatesdcclass (
                sdcformdesignid, baseuri, lineage, version, fulluri, formtitle, sdc_xml, doctype
            ) VALUES (@sdcformdesignid, @baseuri, @lineage, @version, @fulluri, @formtitle, @sdc_xml, @doctype);
        ";

        command.Parameters.AddWithValue("@sdcformdesignid", sdcformdesignid);
        command.Parameters.AddWithValue("@baseuri", baseuri);
        command.Parameters.AddWithValue("@lineage", lineage);
        command.Parameters.AddWithValue("@version", version);
        command.Parameters.AddWithValue("@fulluri", fulluri);
        command.Parameters.AddWithValue("@formtitle", formtitle);
        command.Parameters.AddWithValue("@sdc_xml", sdc_xml);
        command.Parameters.AddWithValue("@doctype", doctype);
        
        try
        {
            command.ExecuteNonQuery();
            Console.WriteLine($"Inserted data from {Path.GetFileName(filePath)} into the database.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while inserting data from {Path.GetFileName(filePath)}: {ex.Message}");
        }
    }
}

#!csharp

// Define importer for SDC XML

using System.Xml.Linq;
using System.Linq;

public class SdcProcessor
{
    public delegate dynamic CreateTemplateSdcDelegate(
        string sdcformdesignid,
        string baseuri,
        string lineage,
        string version,
        string fulluri,
        string formtitle,
        string sdc_xml,
        string doctype
    );

    public delegate dynamic CreateTemplateInstanceClassDelegate(
        int templatesdc_fk,
        string template_instance_version_guid = null,
        string template_instance_version_uri = null,
        string instance_version_date = null,
        string diag_report_props = null,
        string surg_path_id = null,
        string person_fk = null,
        string encounter_fk = null,
        string practitioner_fk = null,
        string report_text = null
    );

    public delegate dynamic CreateSdcObsClassDelegate(
        int template_instance_class_fk,
        string section_id,
        string section_guid,
        string q_text,
        string q_instance_guid,
        string q_id,
        string li_text,
        string li_id,
        string li_instance_guid,
        string sdc_order,
        string response = null,
        string units = null,
        string units_system = null,
        string datatype = null,
        int? response_int = null,
        double? response_float = null,
        DateTime? response_datetime = null,
        string reponse_string_nvarchar = null,
        string li_parent_guid = null
    );

    public static void ProcessXml(
        XElement xmlRoot,
        CreateTemplateSdcDelegate createTemplateSdcClass,
        CreateTemplateInstanceClassDelegate createTemplateInstanceClass,
        CreateSdcObsClassDelegate createSdcObsClass
    )
    {
        XNamespace sdc = "urn:ihe:qrph:sdc:2016";

        XElement formDesign = xmlRoot.Element(sdc + "FormDesign") ?? xmlRoot;
        Console.WriteLine($"Form Design: {formDesign}");

        if (formDesign != null)
        {
            var new_template_sdc = createTemplateSdcClass(
                formDesign.Attribute("ID")?.Value ?? "UNKNOWN",
                formDesign.Attribute("baseURI")?.Value ?? "UNKNOWN",
                formDesign.Attribute("lineage")?.Value ?? "UNKNOWN",
                formDesign.Attribute("version")?.Value ?? "UNKNOWN",
                formDesign.Attribute("fullURI")?.Value ?? "UNKNOWN",
                formDesign.Attribute("formTitle")?.Value ?? "UNKNOWN",
                formDesign.ToString(),
                "FD"
            );

            var new_template_instance_class = createTemplateInstanceClass(new_template_sdc.pk);

            XElement body = formDesign.Element(sdc + "Body");
            if (body == null) throw new Exception("Body element not found.");

            var childItems = body.Elements(sdc + "ChildItems");
            if (childItems == null) throw new Exception("No ChildItems found in Body.");

            foreach (XElement child in childItems)
            {
                ProcessChildItem(
                    child,
                    createTemplateSdcClass,
                    createTemplateInstanceClass,
                    createSdcObsClass,
                    new_template_instance_class.pk
                );
            }
        }
    }

    private static void ProcessChildItem(
        XElement childItem,
        CreateTemplateSdcDelegate createTemplateSdcClass,
        CreateTemplateInstanceClassDelegate createTemplateInstanceClass,
        CreateSdcObsClassDelegate createSdcObsClass,
        int template_instance_class_fk,
        string section_id = null,
        string section_guid = null
    )
    {
        XNamespace sdc = "urn:ihe:qrph:sdc:2016";

        var sections = childItem.Elements(sdc + "Section");
        foreach (XElement section in sections)
        {
            section_id = section.Attribute("name")?.Value;
            section_guid = section.Attribute("ID")?.Value;

            var childItems = section.Elements(sdc + "ChildItems");
            if (childItems == null)
                throw new Exception("ChildItems not found inside Section.");

            foreach (XElement child in childItems)
            {
                ProcessChildItem(
                    child,
                    createTemplateSdcClass,
                    createTemplateInstanceClass,
                    createSdcObsClass,
                    template_instance_class_fk,
                    section_id,
                    section_guid
                );
            }
        }

        var questions = childItem.Elements(sdc + "Question");
        foreach (XElement question in questions)
        {
            ProcessQuestion(
                question,
                createTemplateSdcClass,
                createTemplateInstanceClass,
                createSdcObsClass,
                template_instance_class_fk,
                section_id,
                section_guid
            );
        }
    }

    private static void ProcessQuestion(
        XElement question,
        CreateTemplateSdcDelegate createTemplateSdcClass,
        CreateTemplateInstanceClassDelegate createTemplateInstanceClass,
        CreateSdcObsClassDelegate createSdcObsClass,
        int template_instance_class_fk,
        string section_id,
        string section_guid
    )
    {
        XNamespace sdc = "urn:ihe:qrph:sdc:2016";

        string question_id = question.Attribute("name")?.Value;
        string question_guid = question.Attribute("ID")?.Value;
        string question_text = question.Attribute("title")?.Value;

        XElement listField = question.Element(sdc + "ListField");
        if (listField != null)
        {
            ProcessListField(
                listField,
                createTemplateSdcClass,
                createTemplateInstanceClass,
                createSdcObsClass,
                template_instance_class_fk,
                section_id,
                section_guid,
                question_text,
                question_id,
                question_guid
            );
        }

        XElement responseField = question.Element(sdc + "ResponseField");
        if (responseField != null)
        {
            ProcessResponseField(
                responseField,
                createTemplateSdcClass,
                createTemplateInstanceClass,
                createSdcObsClass,
                template_instance_class_fk,
                section_id,
                section_guid,
                question_text,
                question_id,
                question_guid
            );
        }
    }

    private static void ProcessListField(
        XElement listField,
        CreateTemplateSdcDelegate createTemplateSdcClass,
        CreateTemplateInstanceClassDelegate createTemplateInstanceClass,
        CreateSdcObsClassDelegate createSdcObsClass,
        int template_instance_class_fk,
        string section_id,
        string section_guid,
        string question_text,
        string question_id,
        string question_guid
    )
    {
        XNamespace sdc = "urn:ihe:qrph:sdc:2016";

        XElement listElem = listField.Element(sdc + "List");
        if (listElem != null)
        {
            foreach (XElement listItem in listElem.Elements(sdc + "ListItem"))
            {
                XElement li_response_field = listItem.Element(sdc + "ListItemResponseField");
                if (li_response_field != null)
                {
                    ProcessResponseField(
                        li_response_field,
                        createTemplateSdcClass,
                        createTemplateInstanceClass,
                        createSdcObsClass,
                        template_instance_class_fk,
                        section_id,
                        section_guid,
                        question_text,
                        question_id,
                        question_guid,
                        li_text: listItem.Attribute("title")?.Value,
                        li_id: listItem.Attribute("name")?.Value,
                        li_instance_guid: listItem.Attribute("ID")?.Value
                    );
                }
                else
                {
                    createSdcObsClass(
                        template_instance_class_fk,
                        section_id,
                        section_guid,
                        question_text,
                        question_guid,
                        question_id,
                        listItem.Attribute("title")?.Value,
                        listItem.Attribute("name")?.Value,
                        listItem.Attribute("ID")?.Value,
                        listItem.Attribute("order")?.Value
                    );
                }
            }
        }
    }

    private static void ProcessResponseField(
        XElement responseField,
        CreateTemplateSdcDelegate createTemplateSdcClass,
        CreateTemplateInstanceClassDelegate createTemplateInstanceClass,
        CreateSdcObsClassDelegate createSdcObsClass,
        int template_instance_class_fk,
        string section_id,
        string section_guid,
        string question_text,
        string question_id,
        string question_guid,
        string li_text = null,
        string li_id = null,
        string li_instance_guid = null,
        string li_parent_guid = null
    )
    {
        XNamespace sdc = "urn:ihe:qrph:sdc:2016";

        string response_units = null;
        string response_units_system = null;

        XElement response_units_elem = responseField.Element(sdc + "ResponseUnits");
        if (response_units_elem != null)
        {
            response_units = response_units_elem.Attribute("val")?.Value;
            response_units_system = response_units_elem.Attribute("unitSystem")?.Value;
        }

        XElement response = responseField.Element(sdc + "Response");
        if (response != null)
        {
            XElement response_string = response.Element(sdc + "string");
            string response_string_val = response_string?.Attribute("val")?.Value;

            createSdcObsClass(
                template_instance_class_fk,
                section_id,
                section_guid,
                question_text,
                question_guid,
                question_id,
                li_text,
                li_id,
                li_instance_guid,
                response.Attribute("order")?.Value,
                response: response.Attribute("val")?.Value,
                units: response_units,
                units_system: response_units_system,
                reponse_string_nvarchar: response_string_val,
                li_parent_guid: li_parent_guid
            );
        }
    }
}

#!csharp

// Create callback delegates for each SDC element, to write it to the database

var createTemplateSdcClass = new SdcProcessor.CreateTemplateSdcDelegate(
    (sdcformdesignid, baseuri, lineage, version, fulluri, formtitle, sdc_xml, doctype) => {
        // Print data for debugging:
        Console.WriteLine($"TemplateSdcClass: {sdcformdesignid}, {baseuri}, {lineage}, {version}, {fulluri}, {formtitle}, {sdc_xml}, {doctype}");
        
        using (var cmd = connection.CreateCommand())
        {
            cmd.CommandText = @"
                INSERT INTO main.templatesdcclass 
                (sdcformdesignid, baseuri, lineage, version, fulluri, formtitle, sdc_xml, doctype)
                VALUES (@sdcformdesignid, @baseuri, @lineage, @version, @fulluri, @formtitle, @sdc_xml, @doctype);
                SELECT last_insert_rowid();
            ";

            cmd.Parameters.AddWithValue("@sdcformdesignid", (object)sdcformdesignid ?? DBNull.Value);
            cmd.Parameters.AddWithValue("@baseuri", (object)baseuri ?? DBNull.Value);
            cmd.Parameters.AddWithValue("@lineage", (object)lineage ?? DBNull.Value);
            cmd.Parameters.AddWithValue("@version", (object)version ?? DBNull.Value);
            cmd.Parameters.AddWithValue("@fulluri", (object)fulluri ?? DBNull.Value);
            cmd.Parameters.AddWithValue("@formtitle", (object)formtitle ?? DBNull.Value);
            cmd.Parameters.AddWithValue("@sdc_xml", (object)sdc_xml ?? DBNull.Value);
            cmd.Parameters.AddWithValue("@doctype", (object)doctype ?? DBNull.Value);

            var pk = (long)cmd.ExecuteScalar();
            return new { pk = (int)pk };
        }
    }
);

var createTemplateInstanceClass = new SdcProcessor.CreateTemplateInstanceClassDelegate(
    (templatesdc_fk, template_instance_version_guid, template_instance_version_uri, instance_version_date, diag_report_props, surg_path_id, person_fk, encounter_fk, practitioner_fk, report_text) => {
        // Print data for debugging:
        Console.WriteLine($"TemplateInstanceClass: {templatesdc_fk}");
        
        using (var cmd = connection.CreateCommand())
        {
            cmd.CommandText = @"
                INSERT INTO templateinstanceclass 
                (templateinstanceversionguid, templateinstanceversionuri, templatesdcfk, instanceversiondate, diagreportprops, surgpathid, personfk, encounterfk, practitionerfk, reporttext)
                VALUES (@templateinstanceversionguid, @templateinstanceversionuri, @templatesdcfk, @instanceversiondate, @diagreportprops, @surgpathid, @personfk, @encounterfk, @practitionerfk, @reporttext);
                SELECT last_insert_rowid();
            ";

            cmd.Parameters.AddWithValue("@templateinstanceversionguid", (object)template_instance_version_guid ?? DBNull.Value);
            cmd.Parameters.AddWithValue("@templateinstanceversionuri", (object)template_instance_version_uri ?? DBNull.Value);
            cmd.Parameters.AddWithValue("@templatesdcfk", templatesdc_fk);
            cmd.Parameters.AddWithValue("@instanceversiondate", (object)instance_version_date ?? DBNull.Value);
            cmd.Parameters.AddWithValue("@diagreportprops", (object)diag_report_props ?? DBNull.Value);
            cmd.Parameters.AddWithValue("@surgpathid", (object)surg_path_id ?? DBNull.Value);
            cmd.Parameters.AddWithValue("@personfk", (object)person_fk ?? DBNull.Value);
            cmd.Parameters.AddWithValue("@encounterfk", (object)encounter_fk ?? DBNull.Value);
            cmd.Parameters.AddWithValue("@practitionerfk", (object)practitioner_fk ?? DBNull.Value);
            cmd.Parameters.AddWithValue("@reporttext", (object)report_text ?? DBNull.Value);

            var pk = (long)cmd.ExecuteScalar();
            return new { pk = (int)pk };
        }
    }
);

var createSdcObsClass = new SdcProcessor.CreateSdcObsClassDelegate(
    (template_instance_class_fk, section_id, section_guid, q_text, q_instance_guid, q_id, li_text, li_id, li_instance_guid, sdc_order, response, units, units_system, datatype, response_int, response_float, response_datetime, reponse_string_nvarchar, li_parent_guid) => {
        // Print data for debugging:
        Console.WriteLine($"SdcObsClass: {template_instance_class_fk}, {section_id}, {section_guid}, {q_text}, {q_instance_guid}, {q_id}, {li_text}, {li_id}, {li_instance_guid}, {sdc_order}, {response}, {units}, {units_system}, {datatype}, {response_int}, {response_float}, {response_datetime}, {reponse_string_nvarchar}, {li_parent_guid}");
        
        using (var cmd = connection.CreateCommand())
        {
            cmd.CommandText = @"
                INSERT INTO sdcobsclass 
                (templateinstanceclassfk, parentinstanceguid, section_id, section_guid, q_text, q_instanceguid, q_id, li_text, li_id, li_instanceguid, li_parentguid, response, units, units_system, datatype, response_int, response_float, response_datetime, reponse_string_nvarchar, obsdatetime, sdcorder, sdcrepeatlevel, sdccomments, personfk, encounterfk, practitionerfk)
                VALUES (@templateinstanceclassfk, @parentinstanceguid, @section_id, @section_guid, @q_text, @q_instanceguid, @q_id, @li_text, @li_id, @li_instanceguid, @li_parentguid, @response, @units, @units_system, @datatype, @response_int, @response_float, @response_datetime, @reponse_string_nvarchar, @obsdatetime, @sdcorder, @sdcrepeatlevel, @sdccomments, @personfk, @encounterfk, @practitionerfk);
                SELECT last_insert_rowid();
            ";

            cmd.Parameters.AddWithValue("@templateinstanceclassfk", template_instance_class_fk);
            cmd.Parameters.AddWithValue("@parentinstanceguid", DBNull.Value);
            cmd.Parameters.AddWithValue("@section_id", (object)section_id ?? DBNull.Value);
            cmd.Parameters.AddWithValue("@section_guid", (object)section_guid ?? DBNull.Value);
            cmd.Parameters.AddWithValue("@q_text", (object)q_text ?? DBNull.Value);
            cmd.Parameters.AddWithValue("@q_instanceguid", (object)q_instance_guid ?? DBNull.Value);
            cmd.Parameters.AddWithValue("@q_id", (object)q_id ?? DBNull.Value);
            cmd.Parameters.AddWithValue("@li_text", (object)li_text ?? DBNull.Value);
            cmd.Parameters.AddWithValue("@li_id", (object)li_id ?? DBNull.Value);
            cmd.Parameters.AddWithValue("@li_instanceguid", (object)li_instance_guid ?? DBNull.Value);
            cmd.Parameters.AddWithValue("@li_parentguid", (object)li_parent_guid ?? DBNull.Value);
            cmd.Parameters.AddWithValue("@response", (object)response ?? DBNull.Value);
            cmd.Parameters.AddWithValue("@units", (object)units ?? DBNull.Value);
            cmd.Parameters.AddWithValue("@units_system", (object)units_system ?? DBNull.Value);
            cmd.Parameters.AddWithValue("@datatype", (object)datatype ?? DBNull.Value);
            cmd.Parameters.AddWithValue("@response_int", (object)response_int ?? DBNull.Value);
            cmd.Parameters.AddWithValue("@response_float", (object)response_float ?? DBNull.Value);
            cmd.Parameters.AddWithValue("@response_datetime", (object)response_datetime ?? DBNull.Value);
            cmd.Parameters.AddWithValue("@reponse_string_nvarchar", (object)reponse_string_nvarchar ?? DBNull.Value);
            cmd.Parameters.AddWithValue("@obsdatetime", DBNull.Value);
            cmd.Parameters.AddWithValue("@sdcorder", (object)sdc_order ?? DBNull.Value);
            cmd.Parameters.AddWithValue("@sdcrepeatlevel", DBNull.Value);
            cmd.Parameters.AddWithValue("@sdccomments", DBNull.Value);
            cmd.Parameters.AddWithValue("@personfk", DBNull.Value);
            cmd.Parameters.AddWithValue("@encounterfk", DBNull.Value);
            cmd.Parameters.AddWithValue("@practitionerfk", DBNull.Value);

            var pk = (long)cmd.ExecuteScalar();
            return new { pk = (int)pk };
        }
    }
);

#!csharp

// Import sample SDC XML files

using System.IO;

//var connection = new SqliteConnection("Data Source=public/sdc_cdm_dotnet.db;");
//connection.Open();

string directoryPath = Path.Combine("..", "sample_data", "sdc_xml");
string[] sdc_xml_files = Directory.GetFiles(directoryPath, "*.xml");

// Iterate over each XML file
foreach (string xml_file in sdc_xml_files)
{
    // Read the XML content
    string xml_str = File.ReadAllText(xml_file);

    // Parse the XML
    XDocument doc = XDocument.Parse(xml_str);
    XElement root = doc.Root;

    // Call the process_xml equivalent
    SdcProcessor.ProcessXml(root, createTemplateSdcClass, createTemplateInstanceClass, createSdcObsClass);
}

#!csharp

// Define importer for NAACCR Vol V messages

using System;
using System.IO;
using System.Linq;
using System.Collections.Generic;

public class Hl7Importer
{
    public static void ImportDataFromHl7(
        string hl7_message,
        SdcProcessor.CreateTemplateSdcDelegate create_template_sdc_class,
        SdcProcessor.CreateTemplateInstanceClassDelegate create_template_instance_class,
        SdcProcessor.CreateSdcObsClassDelegate create_sdc_obs_class,
        bool exit_on_error = true
    )
    {
        void print_extracted_var(string str) => Console.WriteLine($"! {str}");

        void hl7_error(string message)
        {
            Console.WriteLine($"Error: {message}");
            if (exit_on_error)
            {
                throw new Exception(message);
            }
        }

        string get_field(string[] fields, int index)
        {
            // If fields[0] == "MSH", use index-1, else index.
            // This is because MSH segments have a different indexing scheme.
            if (fields[0] == "MSH")
            {
                return (index - 1 >= 0 && index - 1 < fields.Length) ? fields[index - 1] : "";
            }
            else
            {
                return (index >= 0 && index < fields.Length) ? fields[index] : "";
            }
        }

        string get_first_segment(IEnumerable<string> segments, string segment_name)
        {
            foreach (var segment in segments)
            {
                var fields = segment.Split('|');
                if (fields[0] == segment_name)
                {
                    return segment;
                }
            }
            return null;
        }

        List<string> get_all_segments(IEnumerable<string> segments, string segment_name)
        {
            var found_segments = new List<string>();
            foreach (var segment in segments)
            {
                var fields = segment.Split('|');
                if (fields[0] == segment_name)
                {
                    found_segments.Add(segment);
                }
            }
            return found_segments;
        }

        // Split the HL7 message into lines
        var lines = hl7_message.Split(new[] { '\n' }, StringSplitOptions.RemoveEmptyEntries);

        // MSH segment
        var msh_segment = get_first_segment(lines, "MSH");
        if (msh_segment == null)
        {
            hl7_error("No MSH segment found");
            return;
        }
        var msh_segment_fields = msh_segment.Split('|');
        var message_type = get_field(msh_segment_fields, 9);
        if (message_type != "ORU^R01^ORU_R01")
        {
            hl7_error($"Unknown message type: {message_type}");
        }
        Console.WriteLine($"Message type: {message_type}");
        var message_profile = get_field(msh_segment_fields, 21).Trim();
        if (message_profile != "VOL_V_40_ORU_R01^NAACCR_CP")
        {
            hl7_error($"Unknown message profile: {message_profile}");
        }
        Console.WriteLine($"Message profile: {message_profile}");

        // OBR segment
        var obr_segment = get_first_segment(lines, "OBR");
        if (obr_segment == null)
        {
            hl7_error("No OBR segment found");
            return;
        }
        var obr_segment_fields = obr_segment.Split('|');
        var report_type = get_field(obr_segment_fields, 4);
        if (report_type != "60568-3^SYNOPTIC REPORT^LN")
        {
            hl7_error($"Unknown report type: {report_type}");
        }
        Console.WriteLine($"Report type: {report_type}");

        // OBX segments
        var obx_segments = get_all_segments(lines, "OBX");
        if (obx_segments.Count < 3)
        {
            hl7_error("Not enough OBX segments found");
            return;
        }

        // First OBX
        var first_obx = obx_segments[0];
        var first_obx_fields = first_obx.Split('|');
        var observation_identifier = get_field(first_obx_fields, 3);
        if (observation_identifier != "60573-3^Report template source^LN")
        {
            hl7_error($"Unexpected observation identifier: {observation_identifier}");
        }
        Console.WriteLine($"First OBX identifier: {observation_identifier}");
        var document_source_style = get_field(first_obx_fields, 5);
        if (document_source_style != "CAP eCC")
        {
            hl7_error($"Unexpected document source style: {document_source_style}");
        }
        Console.WriteLine($"Document source style: {document_source_style}");

        // Second OBX
        var second_obx = obx_segments[1];
        var second_obx_fields = second_obx.Split('|');
        observation_identifier = get_field(second_obx_fields, 3);
        if (observation_identifier != "60572-5^Report template ID^LN")
        {
            hl7_error($"Unexpected observation identifier: {observation_identifier}");
        }
        var template_id = get_field(second_obx_fields, 5);
        var template_id_parts = template_id.Split('^');
        // Assuming template_id always has at least two parts
        var form_title = template_id_parts.Length > 1 ? template_id_parts[1] : "UNKNOWN_FORM_TITLE";
        Console.WriteLine($"Template ID: {template_id}");
        print_extracted_var($"Form Title: {form_title}");

        // Third OBX
        var third_obx = obx_segments[2];
        var third_obx_fields = third_obx.Split('|');
        observation_identifier = get_field(third_obx_fields, 3);
        if (observation_identifier != "60574-1^Report template version ID^LN")
        {
            hl7_error($"Unexpected observation identifier: {observation_identifier}");
        }
        var version_id = get_field(third_obx_fields, 5);
        print_extracted_var($"Version ID: {version_id}");

        // Insert into DB (template_sdc)
        var new_template_sdc = create_template_sdc_class(
            "UNKNOWN",
            "UNKNOWN",
            "UNKNOWN",
            version_id ?? "UNKNOWN",
            "UNKNOWN",
            form_title,
            "UNKNOWN",
            "FD"
        );

        // Insert into DB (template_instance_class)
        var new_template_instance_class = create_template_instance_class(new_template_sdc.pk);
        var new_template_instance_class_fk = new_template_instance_class.pk;

        // Build map of observations
        var obs_sub_id_map = new Dictionary<string, Dictionary<string, string>>();

        var rest_of_obx_segments = obx_segments.Skip(3);
        foreach (var obx_segment in rest_of_obx_segments)
        {
            var obx_segment_fields = obx_segment.Split('|');
            var observation_data_type = get_field(obx_segment_fields, 2);
            observation_identifier = get_field(obx_segment_fields, 3);
            var obs_id_parts = observation_identifier.Split('^');
            var q_id = obs_id_parts.Length > 0 ? obs_id_parts[0] : null;
            var q_text = obs_id_parts.Length > 1 ? obs_id_parts[1] : null;
            Console.WriteLine($"Q ID: {q_id}");
            Console.WriteLine($"Q Text: {q_text}");

            var observation_sub_id = get_field(obx_segment_fields, 4);
            if (!string.IsNullOrEmpty(observation_sub_id))
            {
                var observation_value = get_field(obx_segment_fields, 5);
                var obs_val_parts = observation_value.Split('^');
                string li_text = null;
                string li_id = null;
                if (obs_val_parts.Length > 1)
                {
                    li_text = obs_val_parts[0];
                    li_id = obs_val_parts[1];
                }
                var observation_units = get_field(obx_segment_fields, 6);

                if (obs_sub_id_map.ContainsKey(observation_sub_id))
                {
                    Console.WriteLine($"@@@@@ Observation sub ID already exists: {observation_sub_id}");
                }
                else
                {
                    obs_sub_id_map[observation_sub_id] = new Dictionary<string, string> {
                        { "q_id", q_id },
                        { "q_text", q_text },
                        { "value", observation_value },
                        { "units", observation_units }
                    };
                }
                if (!string.IsNullOrEmpty(observation_units))
                {
                    Console.WriteLine($"Observation units: {observation_units}");
                }
                Console.WriteLine($"@@@ Observation sub ID: {observation_sub_id}");
            }
            else
            {
                var observation_value = get_field(obx_segment_fields, 5);
                string response = null;
                string li_text = null;
                string li_id = null;
                if (observation_data_type == "ST")
                {
                    response = observation_value.Length > 99 ? observation_value.Substring(0,99) : observation_value;
                }
                else
                {
                    var obs_val_parts = observation_value.Split('^');
                    if (obs_val_parts.Length > 1)
                    {
                        li_text = obs_val_parts[0];
                        li_id = obs_val_parts[1];
                    }
                }

                create_sdc_obs_class(
                        new_template_instance_class_fk,
                        "UNKNOWN",
                        "UNKNOWN",
                        q_text,
                        "UNKNOWN",
                        q_id,
                        li_text,
                        li_id,
                        "UNKNOWN",
                        "UNKNOWN",
                        response
                );
            }
        }
    }
}

#!csharp

// Import NAACCR v2 messages

using System.IO;
string directoryPath = Path.Combine("..", "sample_data", "naaccr_v2");
string[] v2_messages = Directory.GetFiles(directoryPath, "*.hl7");

// Iterate over each HL7 file
foreach (var message in v2_messages)
{
    try
    {
        // Read the HL7 content
        string message_str = File.ReadAllText(message);

        // Call the import function
        Hl7Importer.ImportDataFromHl7(
            hl7_message: message_str,
            create_template_sdc_class: createTemplateSdcClass,
            create_template_instance_class: createTemplateInstanceClass,
            create_sdc_obs_class: createSdcObsClass,
            exit_on_error: true
        );
    }
    catch (Exception e)
    {
        Console.WriteLine($"Error processing message: {message}: {e.Message}");
        continue;
    }
}

#!csharp

// Print data for debugging

using Microsoft.Data.Sqlite;

var connection = new SqliteConnection("Data Source=public/sdc_cdm_dotnet_3.db;");
connection.Open();
var results = new List<Dictionary<string, object>>();

using (var cmd = connection.CreateCommand())
        {
            cmd.CommandText = @"
                SELECT * FROM sdcobsclass;
            ";


    using (var reader = cmd.ExecuteReader())
    {
        var row = new Dictionary<string, object>();

        for (int i = 0; i < reader.FieldCount; i++)
        {
            string columnName = reader.GetName(i);
            object value = reader.IsDBNull(i) ? null : reader.GetValue(i);
            row[columnName] = value;
        }

        results.Add(row);
    }
    }
results
