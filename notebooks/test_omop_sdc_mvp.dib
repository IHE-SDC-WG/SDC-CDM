#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp","languageName":"C#","aliases":["c#","cs"]},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"html","languageName":"HTML"},{"name":"http","languageName":"HTTP"},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"kql","languageName":"KQL"},{"name":"mermaid","languageName":"Mermaid"},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"sql","languageName":"SQL"},{"name":"sql-ecpdb","languageName":"SQLite"},{"name":"value"}]}}

#!markdown

# OMOP SDC MVP - Interactive Testing Notebook

This notebook provides an interactive way to test the OMOP SDC MVP implementation for importing Elective Case Pre-Adjudication (ECP) data from NAACCR V2 CPR messages into the OMOP Common Data Model (CDM) v5.4.

## Overview

This notebook will:
1. **Build the SDC CDM libraries**
2. **Create a test database** with the extended OMOP schema
3. **Import sample NAACCR V2 data** (Adrenal gland pathology report)
4. **Validate the import** by querying the data
5. **Demonstrate query capabilities** for both standard OMOP and SDC-specific fields
6. **Provide comprehensive testing** across 13 validation steps

## Prerequisites

- .NET 8.0 SDK installed
- Polyglot Notebooks extension in VS Code
- Sample data files available in the repository

---

**Note**: This notebook is designed for testing and validation purposes. The database file (`test_ecp.db`) will be created in the current directory and is automatically ignored by Git.

#!pwsh

# Build the SDC CDM libraries
Write-Host "Building SDC CDM libraries..." -ForegroundColor Green
dotnet build ../SdcCdmLib
Write-Host "Build completed!" -ForegroundColor Green

#!csharp

// Reference external libraries and the SDC CDM library assembly
#r "nuget:Microsoft.Data.Sqlite,9.0.0"
#r "nuget:Microsoft.Extensions.Logging.Console,9.0.4"
#r "nuget:Microsoft.DotNet.Interactive.SqlServer,1.0.0-beta.25323.1"
#r "nuget:Microsoft.DotNet.Interactive.Sqlite,1.0.0-beta.25323.1"
#r "../SdcCdmLib/SdcCdm/bin/Debug/net8.0/SdcCdm.dll"
#r "../SdcCdmLib/SdcCdmInSqlite/bin/Debug/net8.0/SdcCdmInSqlite.dll"

using SdcCdm;
using System;
using System.IO;
using System.Linq;
using System.Collections.Generic;

Console.WriteLine("Dependencies loaded. SQL kernel enabled.");

#!markdown

## Step 1: Create Test Database

Create a new SQLite database with the extended OMOP schema for testing.

#!csharp

// Create a test database
var dbPath = "test_ecp.db";

// Remove existing database if it exists
if (File.Exists(dbPath))
{
    File.Delete(dbPath);
    Console.WriteLine($"Removed existing database: {dbPath}");
}

// Create new database instance
var sdcCdm = new SdcCdmInSqlite.SdcCdmInSqlite(dbPath, overwrite: true);

// Build the schema (OMOP v5.4 core + SDC ancillary tables, including sdc_form_answer)
Console.WriteLine("Building database schema...");
sdcCdm.BuildSchema();

Console.WriteLine($"Database created successfully: {Path.GetFullPath(dbPath)}");

#!markdown

## Step 2: Import Sample NAACCR V2 Data

Import the sample Adrenal gland and additional pathology reports to test the ECP data import functionality.

#!csharp

using Microsoft.Data.Sqlite;

// Import specific HL7 files
var hl7Files = new[] {
    "../sample_data/naaccr_v2/obx-Adrenal.hl7",
    "../sample_data/naaccr_v2/24-11-000312-2.txt.hl7",
    "../sample_data/naaccr_v2/CDCECC/117.1000043/3716960.hl7",
    "../sample_data/naaccr_v2/CDCECC/119.1000043/3716315.hl7"
};

// Toggle to suppress verbose importer logs (prevents output truncation)
bool quietImporter = false;

string absDbPath = Path.GetFullPath(dbPath);

bool TableExists(SqliteConnection c, string name)
{
    using var cmd = c.CreateCommand();
    cmd.CommandText = "SELECT 1 FROM sqlite_master WHERE type='table' AND name=$name LIMIT 1";
    cmd.Parameters.AddWithValue("$name", name);
    var val = cmd.ExecuteScalar();
    return val != null;
}

int? GetCount(SqliteConnection c, string table)
{
    if (!TableExists(c, table)) return null;
    using var cmd = c.CreateCommand();
    cmd.CommandText = $"SELECT COUNT(*) FROM {table}";
    return Convert.ToInt32(cmd.ExecuteScalar());
}

record ImportSummary(string File, int Size, bool Success, int? RowsAdded, string? Note, string? Error);
var results = new List<ImportSummary>();

foreach (var filePath in hl7Files)
{
    if (!File.Exists(filePath))
    {
        Console.WriteLine($"Sample data file not found: {filePath}");
        Console.Out.Flush();
        results.Add(new ImportSummary(Path.GetFileName(filePath), 0, false, null, null, "File not found"));
        continue;
    }

    SqliteConnection? conn = null;
    string fileName = Path.GetFileName(filePath);
    string? note = null;
    int size = 0;
    try
    {
        Console.WriteLine($"==== BEGIN Import: {fileName} ====");
        Console.Out.Flush();

        var hl7Message = File.ReadAllText(filePath);
        size = hl7Message.Length;
        Console.WriteLine($"File size: {size} characters");
        Console.Out.Flush();

        conn = new SqliteConnection($"Data Source={absDbPath};Cache=Shared");
        conn.Open();
        var beforeCount = GetCount(conn, "measurement");

        var originalOut = Console.Out;
        if (quietImporter)
        {
            Console.SetOut(TextWriter.Null);
        }
        try
        {
            // Import the NAACCR V2 message (this emits its own logs)
            NAACCRVolVImporter.ImportNaaccrVolV(sdcCdm, hl7Message);
        }
        finally
        {
            if (quietImporter)
            {
                Console.SetOut(originalOut);
            }
        }

        var afterCount = GetCount(conn, "measurement");
        if (beforeCount.HasValue && afterCount.HasValue)
        {
            var rowsAdded = afterCount.Value - beforeCount.Value;
            Console.WriteLine($"Import completed successfully! Rows added: {rowsAdded}");
            results.Add(new ImportSummary(fileName, size, true, rowsAdded, null, null));
        }
        else if (afterCount.HasValue)
        {
            Console.WriteLine($"Import completed successfully! measurement rows: {afterCount.Value}");
            note = "Before-count unavailable (table not present before import)";
            results.Add(new ImportSummary(fileName, size, true, null, note, null));
        }
        else
        {
            Console.WriteLine("Import completed. (measurement table not present to compute row counts)");
            note = "measurement table missing";
            results.Add(new ImportSummary(fileName, size, true, null, note, null));
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error during import: {ex.Message}");
        Console.WriteLine($"Stack trace: {ex.StackTrace}");
        results.Add(new ImportSummary(fileName, size, false, null, note, ex.Message));
    }
    finally
    {
        try { conn?.Dispose(); } catch { }
        Console.WriteLine($"==== END Import: {fileName} ====\n");
        Console.Out.Flush();
    }
}

// Print a compact summary so results are visible even if the top is truncated
Console.WriteLine("==== Import Summary ====");
foreach (var r in results)
{
    var status = r.Success ? "OK" : "FAIL";
    var rows = r.RowsAdded.HasValue ? r.RowsAdded.Value.ToString() : (r.Success ? (r.Note ?? "n/a") : "n/a");
    var extra = r.Error != null ? $" | error: {r.Error}" : (r.Note != null ? $" | note: {r.Note}" : string.Empty);
    Console.WriteLine($"- {r.File} | size: {r.Size} | status: {status} | rows: {rows}{extra}");
}
Console.Out.Flush();

#!csharp

#!connect sqlite --kernel-name ecpdb "Data Source=/Users/work/repos/SDC-CDM/notebooks/test_ecp.db;Cache=Shared"

// Connection established to SQLite database file test_ecp.db as kernel 'ecpdb'.

#!markdown

## Step 3: Validate Import - Template Instances

Let's verify that the template instance was created correctly in the `sdc_template_instance_ecp` table.

#!sql-ecpdb

SELECT
  sdc_template_instance_ecp_id AS id,
  template_name,
  template_version,
  template_instance_guid AS guid,
  COALESCE(tumor_site, 'N/A') AS tumor_site,
  COALESCE(procedure_type, 'N/A') AS procedure,
  COALESCE(specimen_laterality, 'N/A') AS laterality,
  COALESCE(report_template_source, 'N/A') AS source,
  created_datetime AS created
FROM sdc_template_instance_ecp
ORDER BY created_datetime DESC;

#!markdown

## Step 4: Validate Import - Measurement Count

Check how many ECP measurements were imported into the extended `measurement` table.

#!sql-ecpdb

SELECT COUNT(*) AS total_answers
FROM sdc_form_answer;

#!markdown

## Step 5: Validate Import - Response Types

Analyze the distribution of answers by response type (numeric, text, list_selection). Include a catchâ€‘all bucket for any other or future types.

#!sql-ecpdb

WITH typed AS (
  SELECT sfa.sdc_form_answer_id,
         CASE
           WHEN EXISTS (
             SELECT 1 FROM measurement m
             WHERE m.sdc_form_answer_id = sfa.sdc_form_answer_id
           ) THEN 'numeric'
           WHEN EXISTS (
             SELECT 1 FROM observation o
             WHERE o.sdc_form_answer_id = sfa.sdc_form_answer_id
           ) AND (
             EXISTS (
               SELECT 1 FROM observation o2
               WHERE o2.sdc_form_answer_id = sfa.sdc_form_answer_id
                 AND o2.value_as_concept_id IS NOT NULL
             )
             OR UPPER(COALESCE(sfa.datatype, '')) IN ('CWE','LIST','LIST_SELECTION','CODED')
             OR sfa.list_item_id IS NOT NULL
             OR sfa.list_item_text IS NOT NULL
           ) THEN 'list_selection'
           WHEN EXISTS (
             SELECT 1 FROM observation o
             WHERE o.sdc_form_answer_id = sfa.sdc_form_answer_id
           ) THEN 'text'
           ELSE 'other'
         END AS response_type
  FROM sdc_form_answer sfa
)
SELECT response_type, COUNT(*) AS cnt
FROM typed
GROUP BY response_type
ORDER BY cnt DESC, response_type;

#!markdown

## Step 6: Retrieve list_selection Responses

Show list selection answers and relevant fields (code/text where available).

#!sql-ecpdb

SELECT sfa.sdc_form_answer_id AS form_answer_id,
       o.observation_id,
       o.person_id,
       DATE(o.observation_date) AS date,
       sfa.question_instance_guid AS question_guid,
       sfa.question_text,
       sfa.list_item_id,
       sfa.list_item_text
FROM observation o
JOIN sdc_form_answer sfa ON sfa.sdc_form_answer_id = o.sdc_form_answer_id
WHERE (
    o.value_as_concept_id IS NOT NULL
    OR UPPER(COALESCE(sfa.datatype, '')) IN ('CWE','LIST','LIST_SELECTION','CODED')
    OR sfa.list_item_id IS NOT NULL
    OR sfa.list_item_text IS NOT NULL
)
ORDER BY o.observation_id
LIMIT 25;

#!markdown

## Step 7: Retrieve Numeric Responses

Show numeric answers and relevant fields (value and units where available).

#!sql-ecpdb

SELECT sfa.sdc_form_answer_id AS form_answer_id,
       m.measurement_id,
       m.person_id,
       DATE(m.measurement_date) AS date,
       sfa.question_instance_guid AS question_guid,
       sfa.question_text,
       m.value_as_number,
       COALESCE(m.unit_source_value, 'N/A') AS unit_source_value
FROM measurement m
JOIN sdc_form_answer sfa ON sfa.sdc_form_answer_id = m.sdc_form_answer_id
WHERE m.value_as_number IS NOT NULL
ORDER BY m.measurement_id
LIMIT 25;

#!markdown

## Step 8: Retrieve Text Responses

Show freeâ€‘text answers and relevant fields.

#!sql-ecpdb

SELECT sfa.sdc_form_answer_id AS form_answer_id,
       o.observation_id,
       o.person_id,
       DATE(o.observation_date) AS date,
       sfa.question_instance_guid AS question_guid,
       sfa.question_text,
       COALESCE(o.value_as_string, printf('%g', o.value_as_number)) AS value_text
FROM observation o
JOIN sdc_form_answer sfa ON sfa.sdc_form_answer_id = o.sdc_form_answer_id
WHERE NOT (
    o.value_as_concept_id IS NOT NULL
    OR UPPER(COALESCE(sfa.datatype, '')) IN ('CWE','LIST','LIST_SELECTION','CODED')
    OR sfa.list_item_id IS NOT NULL
    OR sfa.list_item_text IS NOT NULL
)
ORDER BY o.observation_id
LIMIT 25;

#!markdown

## Step 9: OMOP Compliance Validation

Verify that standard OMOP fields are properly populated alongside the SDC-specific data, ensuring every column shows at least one example with actual values.

#!sql-ecpdb

SELECT 'measurement' AS src,
   m.measurement_id AS id,
   m.person_id AS person,
    m.measurement_concept_id AS concept,
    DATE(m.measurement_date) AS date, m.measurement_type_concept_id AS type,
    printf('%g', m.value_as_number) AS value, sfa.question_text, sfa.question_instance_guid
FROM measurement m
JOIN sdc_form_answer sfa ON sfa.sdc_form_answer_id = m.sdc_form_answer_id
UNION ALL
SELECT 'observation' AS src, o.observation_id AS id, o.person_id AS person, o.observation_concept_id AS concept,
       DATE(o.observation_date) AS date, o.observation_type_concept_id AS type,
       COALESCE(o.value_as_string, printf('%g', o.value_as_number)) AS value, sfa.question_text, sfa.question_instance_guid
FROM observation o
JOIN sdc_form_answer sfa ON sfa.sdc_form_answer_id = o.sdc_form_answer_id
ORDER BY src, id
LIMIT 25;

#!markdown

## Step 10: Advanced Query Examples

Demonstrate more complex queries that combine standard OMOP fields with SDC-specific data.

#!sql-ecpdb

SELECT sfa.question_instance_guid AS question_id,
       sfa.question_text,
       printf('%.1f', m.value_as_number) AS value,
       COALESCE(m.unit_source_value, 'N/A') AS units
FROM measurement m
JOIN sdc_form_answer sfa ON sfa.sdc_form_answer_id = m.sdc_form_answer_id
WHERE m.value_as_number IS NOT NULL
ORDER BY m.measurement_id;

#!markdown

## Step 11: Template Metadata Analysis

Analyze the template metadata stored in the `sdc_template_instance_ecp` table.

#!sql-ecpdb

SELECT template_name,
       template_version,
       COALESCE(report_template_source, 'N/A') AS source,
       COALESCE(report_template_id, 'N/A') AS id,
       COALESCE(report_template_version_id, 'N/A') AS version_id,
       COALESCE(tumor_site, 'N/A') AS tumor_site,
       COALESCE(procedure_type, 'N/A') AS procedure,
       COALESCE(specimen_laterality, 'N/A') AS laterality
FROM sdc_template_instance_ecp;

#!markdown

## Step 12: Summary and Validation

Provide a summary of the test results and validate that the MVP is working correctly.

#!sql-ecpdb

SELECT 'Template Instances (ECP)' AS metric, COUNT(*) AS value FROM sdc_template_instance_ecp
UNION ALL
SELECT 'SDC Form Answers' AS metric, COUNT(*) FROM sdc_form_answer
UNION ALL
SELECT 'Person Records' AS metric, COUNT(*) FROM person
UNION ALL
SELECT 'Concept Records' AS metric, COUNT(*) FROM concept;

#!markdown

## Step 13: Cleanup (Optional)

If you want to clean up the test database, you can run this cell. The database file is already ignored by Git.

#!csharp

// Optional: Clean up test database
Console.WriteLine("\nTo clean up the test database, uncomment the following lines:");
Console.WriteLine("// if (File.Exists(dbPath))");
Console.WriteLine("// { File.Delete(dbPath); Console.WriteLine($\"Removed database: {dbPath}\"); }");

// Uncomment the lines below if you want to clean up
// if (File.Exists(dbPath))
// {
//     File.Delete(dbPath);
//     Console.WriteLine($"Removed database: {dbPath}");
// }

Console.WriteLine("\nTest completed! The database file remains for further inspection.");
